#!/usr/bin/env python

import argparse
import subprocess
import tempfile
import os
import sys

def createObjectFile(tmpDir, file, args, polly):

  llFile = tmpDir + '/output.ll'
  preoptFile = tmpDir + '/output.preopt.ll'
  pollyFile = tmpDir + '/output.polly.ll'
  optFile = tmpDir + '/output.opt.ll'
  assemblyFile = tmpDir + '/output.opt.s'

  includeFlags = ['-I' + x for x in args.includes]
  preprocessorFlags = ['-D' + x for x in args.preprocessor]

  # Create .ll file
  commandLine = ["clang","-emit-llvm", "-S", file, '-o', llFile] + includeFlags \
                + preprocessorFlags
  subprocess.call(commandLine, shell=False) 

  # Preoptimize it for polly
  preoptPasses = '-basicaa -mem2reg -inline -early-cse -simplify-libcalls -simplifycfg -instcombine -tailcallelim -loopsimplify -lcssa -loop-rotate -lcssa -loop-unswitch -instcombine -loopsimplify -lcssa -indvars -loop-deletion -instcombine -polly-prepare'
  commandLine = ['opt', '-load', polly] + preoptPasses.split(' ') + ['-S', llFile, '-o', preoptFile]
  subprocess.call(commandLine, shell=False) 


  # Run polly
  if args.fpolly:
    optionalArgs = []

    if args.fpluto:
      optionalArgs = ['-polly-optimize']
    if args.ftile:
      optionalArgs.append('-enable-pluto-tile')

    if args.dump:
      commandLine = ['opt', '-load', polly, '-basicaa'] + optionalArgs + ['-polly-cloog', '-analyze', preoptFile, '-q', '-disable-polly-legality']
      subprocess.call(commandLine, shell=False) 
    commandLine = ['opt', '-load', polly, '-basicaa'] + optionalArgs + ['-polly-codegen', '-S', preoptFile, '-o', pollyFile, '-disable-polly-legality']
    subprocess.call(commandLine, shell=False) 
  else:
    commandLine = ['cp', preoptFile, pollyFile]
    subprocess.call(commandLine, shell=False) 

  # Optimize it
  commandLine = ['opt', '-O3', '-S', pollyFile, '-o', optFile]
  subprocess.call(commandLine, shell=False) 

  # Create assembly file
  commandLine = ['llc', optFile, '-o', assemblyFile]
  subprocess.call(commandLine, shell=False) 

  return assemblyFile

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('files', nargs='+')
  parser.add_argument('-o', '--output', help='The name of the output file')
  parser.add_argument('-I', action='append', dest='includes', default=[])
  parser.add_argument('-D', action='append', dest='preprocessor', default=[])
  parser.add_argument('-l', action='append', dest='libraries', default=[])
  parser.add_argument('-L', action='append', dest='librarypath', default=[])
  parser.add_argument('-O')
  parser.add_argument('-c', action='store_true')
  parser.add_argument('-fpolly', help='Enable polly', action='store_true')
  parser.add_argument('-d', '--dump', help='Dump the optimized SCoP structure', action='store_true')
  parser.add_argument('-fpluto', help='Enable pluto', action='store_true')
  parser.add_argument('-ftile', help='Enable pluto tile', action='store_true')
  parser.add_argument('-v', dest='verbose', action='store_true')
  args = parser.parse_args()

  objectFiles = []
  tmpDir = tempfile.mkdtemp(prefix='pollyccTmp');

  if not 'LIBPOLLY' in os.environ:
    sys.exit('Polly library not provided. Please set LIBPOLLY environment variable to' + \
              ' the LLVMPolly.so file')

  pollyLib = os.environ['LIBPOLLY']

  for file in args.files:
    objectFiles.append(createObjectFile(tmpDir, file, args, pollyLib))

  # Create assembly file

  if args.output:
    outputFile = args.output
  elif len(args.files) == 1 and args.c:
    outputFile = args.files[0].replace('.c', '.s')
  else:
    outputFile = 'a.out'

  linkerFlags = ['-l' + x for x in args.libraries]
  libraryPath = ['-L' + x for x in args.librarypath]

  if args.c:
    commandLine = ['gcc', '-c', '-o', outputFile] + objectFiles
  else:
    commandLine = ['gcc', '-o', outputFile] + objectFiles + linkerFlags + libraryPath
 
  subprocess.call(commandLine, shell=False) 
