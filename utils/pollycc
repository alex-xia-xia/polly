#!/usr/bin/env python

import argparse
import subprocess
import tempfile
import os
import sys

def createAssemblyFile(tmpDir, file, args, polly):
  # Create an LLVM-IR .ll file
  llFile = tmpDir + '/output.ll'
  includeFlags = ['-I' + x for x in args.includes]
  preprocessorFlags = ['-D' + x for x in args.preprocessor]

  commandLine = ["clang","-emit-llvm", "-S", file, '-o', llFile] \
                + includeFlags + preprocessorFlags
  subprocess.call(commandLine, shell=False)

  # Preprocess the programm such that as many optimization opportunities
  # as possible are exposed.
  preoptFile = tmpDir + '/output.preopt.ll'
  preoptPasses = '-basicaa -mem2reg -inline -early-cse -simplify-libcalls ' \
                 '-simplifycfg -instcombine -tailcallelim -loopsimplify ' \
                 '-lcssa -loop-rotate -lcssa -loop-unswitch -instcombine ' \
                 '-loopsimplify -lcssa -indvars -loop-deletion -instcombine ' \
                 '-polly-prepare'

  commandLine = ['opt', '-load', polly] + preoptPasses.split(' ') \
                + ['-S', llFile, '-o', preoptFile]
  subprocess.call(commandLine)

  # Run the Polly optimizers
  pollyFile = tmpDir + '/output.polly.ll'

  if args.fpolly:
    commandLine = ['opt', '-load', polly, '-basicaa'] \
                  + [preoptFile, '-disable-polly-legality']

    if args.fpluto:
      commandLine.append('-polly-optimize')

    if args.ftile:
      commandLine.append('-enable-pluto-tile')

    if args.debug:
      debugCommandLine = commandLine + ['-polly-cloog', '-analyze', '-q']
      subprocess.call(debugCommandLine)

    commandLine = commandLine + ['-polly-codegen', '-S', '-o', pollyFile]
    subprocess.call(commandLine)

  # Run optimizations to clean up the redundant calculations Polly introduced
  # and to take advantage of non polyhedral optimizations.
  optFile = tmpDir + '/output.opt.ll'
  commandLine = ['opt', '-O3', '-S', '-o', optFile]

  if args.fpolly:
    commandLine.append(pollyFile)
  else:
    commandLine.append(preoptFile)

  subprocess.call(commandLine)

  if args.emitllvm:
    return optFile

  # Create assembly file
  assemblyFile = tmpDir + '/output.opt.s'
  commandLine = ['llc', optFile, '-o', assemblyFile]
  subprocess.call(commandLine)

  return assemblyFile

def parseArguments():
  description = 'pollycc is a simple replacement for compiler drivers like ' \
                'gcc, clang or icc. It uses clang to compile C code and can ' \
                'optimize the code with Polly. It will either produce an ' \
                'optimized binary or an optimized \'.o\' file.'

  parser = argparse.ArgumentParser(description=description)
  parser.add_argument('files', nargs='+')
  parser.add_argument('-o', dest='output', help='the name of the output file')
  parser.add_argument('-I', action='append', dest='includes', default=[],
                      help='include path to pass to clang')
  parser.add_argument('-D', action='append', dest='preprocessor', default=[],
                      help='preprocessor directives to pass to clang')
  parser.add_argument('-l', action='append', dest='libraries', default=[],
                      help='library flags to pass to the linker')
  parser.add_argument('-L', action='append', dest='librarypath', default=[],
                      help='library paths to pass to the linker')
  parser.add_argument('-O', dest='optlevel', choices='0123s',
                      help='optimization level. (ignored)')
  parser.add_argument('-S', action='store_true',
                      help='compile only; do not link or assemble')
  parser.add_argument('--emit-llvm', action='store_true', dest='emitllvm',
                      help='output LLVM-IR instead of assembly if -S is set')
  parser.add_argument('-c', action='store_true',
                      help='compile and assemble, but do not link')
  parser.add_argument('-fpolly', help='enable polly', action='store_true')
  parser.add_argument('-fpluto', help='enable pluto', action='store_true')
  parser.add_argument('-ftile', help='enable pluto tiling', action='store_true')
  parser.add_argument('-d', '--debug', help='print debugging output',
                      action='store_true')
  parser.add_argument('-v', '--version', dest='version', action='store_true',
                      help='print version info')
  arguments = parser.parse_args()

  if arguments.optlevel:
    print 'info: -O' + arguments.optlevel + ' flag ignored. pollycc always ' \
          'uses the highest optimization level. Use plain clang if you need ' \
          'less optimizations.'

  # Post process arguments
  if arguments.ftile:
    arguments.fpluto = True

  if arguments.fpluto:
    arguments.fpolly = True

  return arguments

def createAssemblyFiles(files, args, pollyLib):
  assemblyFiles = []

  tmpDir = tempfile.mkdtemp(prefix='pollycc-');

  for file in args.files:
    assemblyFiles.append(createAssemblyFile(tmpDir, file, args, pollyLib))

  return assemblyFiles

def createOutputFiles(assemblyFiles, args):
  if args.output:
    outputFile = args.output
  elif len(args.files) == 1 and args.c:
    outputFile = args.files[0].replace('.c', '.o')
  elif len(args.files) == 1 and args.S:
    outputFile = args.files[0].replace('.c', '.s')
  else:
    outputFile = 'a.out'

  linkerFlags = ['-l' + x for x in args.libraries]
  libraryPath = ['-L' + x for x in args.librarypath]

  commandLine = ['gcc', '-o', outputFile] + assemblyFiles

  if args.S:
    subprocess.call(['mv', assemblyFiles[0], outputFile])
    return

  if args.c:
    commandLine.append('-c')
  else:
    commandLine = commandLine + linkerFlags + libraryPath

  subprocess.call(commandLine)

def main():
  args = parseArguments()

  if not 'LIBPOLLY' in os.environ:
    sys.exit('Polly library not provided. Please set LIBPOLLY environment ' + \
             'variable to the LLVMPolly.so file')

  pollyLib = os.environ['LIBPOLLY']

  assemblyFiles = createAssemblyFiles(args.files, args, pollyLib)
  createOutputFiles(assemblyFiles, args)

if __name__ == '__main__':
  main()
